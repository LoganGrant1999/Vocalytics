/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            ok?: boolean;
                            version?: string;
                            /** Format: date-time */
                            time?: string;
                            /** @enum {string} */
                            db?: "ok" | "error" | "unknown";
                            /** @enum {string} */
                            stripeWebhook?: "configured" | "not_configured";
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analyze-comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Analyze YouTube comments */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        comments: components["schemas"]["Comment"][];
                    };
                };
            };
            responses: {
                /** @description Analysis results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sentiments?: components["schemas"]["Sentiment"][];
                        };
                    };
                };
                402: components["responses"]["Paywall"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/generate-replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate AI replies to comments */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        comments: components["schemas"]["Comment"][];
                        brandVoice?: string;
                    };
                };
            };
            responses: {
                /** @description Generated replies */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            replies?: {
                                commentId?: string;
                                text?: string;
                            }[];
                        };
                    };
                };
                402: components["responses"]["Paywall"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get subscription status */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Subscription details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            tier?: "free" | "pro";
                            subscription_status?: string;
                            /** Format: date-time */
                            subscribed_until?: string | null;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/me/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get usage statistics */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Usage stats */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            commentsAnalyzed?: number;
                            repliesGenerated?: number;
                            limits?: {
                                weeklyAnalyze?: number;
                                dailyReply?: number;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/billing/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe checkout session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Checkout session URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uri */
                            url?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/billing/portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Stripe customer portal session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Portal session URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** Format: uri */
                            url?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/youtube/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Initiate YouTube OAuth flow */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to Google OAuth consent screen */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/youtube/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch comments from a YouTube video */
        get: {
            parameters: {
                query: {
                    /** @example dQw4w9WgXcQ */
                    videoId: string;
                    pageToken?: string;
                    order?: "time" | "relevance";
                    includeReplies?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Comment threads */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: unknown[];
                            nextPageToken?: string;
                        };
                    };
                };
                /** @description YouTube not connected */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            needsConnect?: boolean;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/youtube/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post a reply to a YouTube comment */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Comment thread ID */
                        parentId: string;
                        text: string;
                    };
                };
            };
            responses: {
                /** @description Reply posted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success?: boolean;
                            comment?: Record<string, never>;
                        };
                    };
                };
                /** @description Insufficient permissions */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            /** @description User needs to re-authorize with write scope */
                            needsReconnect?: boolean;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/youtube/videos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user's uploaded videos */
        get: {
            parameters: {
                query?: {
                    mine?: boolean;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of videos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserVideo"][];
                    };
                };
                /** @description YouTube not connected */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analysis/{videoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get latest analysis for a video */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    videoId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Analysis result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnalysisResult"];
                    };
                };
                /** @description No analysis found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error?: string;
                            message?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Run sentiment analysis on a video */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    videoId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Analysis result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnalysisResult"];
                    };
                };
                402: components["responses"]["Paywall"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analysis": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all analyzed videos for user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of analyses */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AnalysisResultWithVideo"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analysis/trends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get sentiment trends over time */
        get: {
            parameters: {
                query?: {
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Trend data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TrendPoint"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Comment: {
            id: string;
            videoId?: string;
            author: string;
            text: string;
            /** Format: date-time */
            publishedAt?: string;
            likeCount?: number;
            replyCount?: number;
        };
        Sentiment: {
            commentId?: string;
            score?: number;
            /** @enum {string} */
            label?: "positive" | "neutral" | "negative";
        };
        UserVideo: {
            videoId: string;
            title: string;
            thumbnailUrl?: string;
            /** Format: date-time */
            publishedAt?: string;
            stats: {
                viewCount?: number;
                likeCount?: number;
                commentCount?: number;
            };
        };
        AnalysisResult: {
            videoId: string;
            /** Format: date-time */
            analyzedAt: string;
            sentiment: {
                pos: number;
                neu: number;
                neg: number;
            };
            /** @description Normalized positivity score (pos - neg) */
            score: number;
            topPositive?: Record<string, never>[];
            topNegative?: Record<string, never>[];
            summary?: string;
        };
        AnalysisResultWithVideo: components["schemas"]["AnalysisResult"] & {
            title?: string;
            thumbnailUrl?: string;
            /** Format: date-time */
            publishedAt?: string;
        };
        TrendPoint: {
            /** Format: date-time */
            date: string;
            /** @description Average sentiment score for this date */
            avgScore: number;
        };
    };
    responses: {
        /** @description Free tier limit exceeded */
        Paywall: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    /** @enum {string} */
                    code: "PAYWALL";
                    /** @enum {string} */
                    reason: "FREE_TIER_EXCEEDED";
                    /** @enum {string} */
                    feature: "analyze" | "reply";
                    /** Format: uri */
                    upgradeUrl: string;
                    /** Format: uri */
                    manageUrl?: string;
                    limits?: {
                        weeklyAnalyze?: number;
                        dailyReply?: number;
                    };
                    usage?: {
                        commentsAnalyzed?: number;
                        repliesGenerated?: number;
                    };
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
